package learn.leecode.other;

/**
 * 319
 *
 * @author zgq
 */
public class LeCode319 {

    public static void main(String[] args) {
        int n = 5;
        int res = bulbSwitch(n);
        System.out.println(res);
    }

    /**
     * (319)灯泡开关
     * 初始时有 n 个灯泡关闭。
     * 第 1 轮，你打开所有的灯泡。 第 2 轮，每两个灯泡你关闭一次。
     * 第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。
     * 第 i 轮，每 i 个灯泡切换一次开关。 对于第 n 轮，你只切换最后一个灯泡的开关。
     * <p>
     * 找出 n 轮后有多少个亮着的灯泡。
     * 输入：n = 3      输出：1
     * 解释：
     * 初始时, 灯泡状态 [关闭, 关闭, 关闭].
     * 第一轮后, 灯泡状态 [开启, 开启, 开启].
     * 第二轮后, 灯泡状态 [开启, 关闭, 开启].
     * 第三轮后, 灯泡状态 [开启, 关闭, 关闭].
     * 你应该返回 1，因为只有一个灯泡还亮着。
     * <p>
     * 示例 2：
     * 输入：n = 0     输出：0
     * <p>
     * 示例 3：
     * 输入：n = 1     输出：1
     * <p>
     * 提示：
     * 0 <= n <= 10^9
     */
    public static int bulbSwitch(int n) {
        /*
        n个灯泡有n轮操作，
        那么第n个灯泡被操作的次数决定了其是亮还是关闭；
        若count为奇数必然为开，若为偶数必然为关；
        -> 如何确认count的值？
        被操作就+1
        -> 什么时候被操作？
        易得，当轮数被n所整除时，第n个灯泡就会被操作
        */
        /*int total = 0;
        for (int j = 1; j <= n; j++) {
            int count = 0;
            for (int i = 1; i <= j; i++) {
                if (j % i == 0) {
                    // 表示是整数
                    count++;
                }
            }
            // 非偶数次操作的灯一定亮着
            if (count % 2 != 0) {
                total++;
            }
        }
        return total;
        */

        /* 从数据角度看，一个数被i个不同 的数整除时，若i为奇数，那么该数一定为完全平方数。
        -> 也就是说，n以内的所有完全平方数的灯都是亮着的。
        -> 求n以内的完全平方数的个数，那n的开方的整数部分，就是亮着的灯数量
        */
        return (int) Math.sqrt(n);
    }
}
