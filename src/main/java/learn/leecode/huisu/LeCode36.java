package learn.leecode.huisu;

import java.util.Arrays;

/**
 * 36
 *
 * @author zgq
 */
public class LeCode36 {
    public static void main(String[] args) {
        char[][] nums4 = {
                {'.', '4', '.', '.', '.', '.', '8', '.', '.'},
                {'5', '.', '.', '.', '2', '.', '9', '.', '.'},
                {'.', '8', '6', '9', '1', '.', '.', '.', '.'},
                {'.', '.', '3', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '5', '.', '6', '.', '.', '8', '4'},
                {'.', '.', '.', '5', '.', '2', '.', '.', '7'},
                {'.', '.', '.', '2', '.', '4', '.', '.', '3'},
                {'8', '.', '.', '6', '9', '.', '7', '1', '.'},
                {'9', '.', '.', '.', '.', '.', '.', '5', '.'}
        };
        char[][] nums3 = {
                {'.', '.', '.', '.', '.', '.', '1', '2', '.'},
                {'3', '.', '.', '.', '4', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '.', '7', '.', '4'},
                {'.', '7', '3', '1', '.', '.', '4', '.', '6'},
                {'.', '.', '6', '5', '.', '.', '.', '.', '8'},
                {'.', '.', '5', '6', '.', '7', '9', '.', '.'},
                {'.', '8', '.', '4', '7', '.', '6', '1', '.'},
                {'.', '.', '7', '9', '.', '.', '5', '.', '.'},
                {'9', '4', '.', '.', '6', '.', '.', '8', '7'}
        };
        char[][] nums2 = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        for (char[] num : nums2) {
            System.out.println(Arrays.toString(num));
        }
        System.out.println("--------------------------------------");
        boolean validSudo = isValidSudo(nums2);
        System.out.println(validSudo);
    }

    /**
     * (36)有效的数独
     * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
     * 数字 1-9 在每一行只能出现一次。
     * 数字 1-9 在每一列只能出现一次。
     * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
     * <p>
     * 数独部分空格内已填入了数字，空白格用 '.' 表示。
     * <p>
     * 说明:
     * 一个有效的数独（部分已被填充）不一定是可解的。
     * 只需要根据以上规则，验证已经填入的数字是否有效即可。
     * 给定数独序列只包含数字 1-9 和字符 '.' 。
     * 给定数独永远是 9x9 形式的。
     */
    private static boolean isValidSudo(char[][] board) {
        // 记录所在行值是否重复
        boolean[][] line99 = new boolean[9][10];
        // 记录所在列值是否重复
        boolean[][] column99 = new boolean[9][10];
        // 记录所在3x3值是否重复
        boolean[][][] board33 = new boolean[3][3][10];
        // 记录的值初始化
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                // 不为空的才初始化
                if (board[i][j] != '.') {
                    // '0'的ASCII码10进制值为48，'1'为49，依次执行，数字的char-字符0就是其原始值,
                    int num = board[i][j] - '0';
                    // 如果有一个已经存在了，肯定之前已经设置位true
                    if (line99[i][num] || column99[j][num] || board33[i / 3][j / 3][num]) {
                        return false;
                    }
                    // 表示第i行值为num的数字已被填充
                    line99[i][num] = true;
                    // 表示第j列值为num的数字已被填充
                    column99[j][num] = true;
                    // 表示坐标第(i / 3,j / 3)的3x3方格中值为num的数字已被填充（巧用除法来指引3x3下标）
                    board33[i / 3][j / 3][num] = true;
                }
            }
        }
        return true;
    }
}
