package learn.leecode.dongtaigh;

/**
 * 980
 *
 * @author zgq
 */
public class LeCode980 {

    public static void main(String[] args) {
        int[][] arr = {
                {1, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 2, -1}};
        int res = uniquePaths(arr);
        System.out.println(res);
    }

    /**
     * 不同路径 III(障碍物+4方向)(980)
     * 在二维网格 grid 上，有 4 种类型的方格：
     * 1 表示起始方格。且只有一个起始方格。
     * 2 表示结束方格，且只有一个结束方格。
     * 0 表示我们可以走过的空方格。
     * -1 表示我们无法跨越的障碍。
     * 返回在四个方向（上、下、左、右）上行走时，从起始方格到结束方格的不同路径的数目。
     * 每一个无障碍方格都要通过一次，但是一条路径中不能重复通过同一个方格。
     * <p>
     * 示例 1：
     * 输入：[[1,0,0,0],[0,0,0,0],[0,0,2,-1]]  输出：2
     * 解释：我们有以下两条路径：
     * 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
     * 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
     * <p>
     * 示例 2：
     * 输入：[[1,0,0,0],[0,0,0,0],[0,0,0,2]]   输出：4
     * 解释：我们有以下四条路径：
     * 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
     * 2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
     * 3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
     * 4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
     * <p>
     * 示例 3：
     * 输入：[[0,1],[2,0]] 输出：0
     * 解释：
     * 没有一条路能完全穿过每一个空的方格一次。
     * 请注意，起始和结束方格可以位于网格中的任意位置。
     * <p>
     * 提示： 1 <= grid.length * grid[0].length <= 20
     */
    private static int uniquePaths(int[][] grid) {
        /*
        对于m*n的格子，起始位置与结束位置不定，存在障碍物的情况，且方向可以4向走，那么就是递归穷举法可解->回溯
        */
        int m = grid[0].length;
        int n = grid.length;
        // 记录起始位置
        int startX = 0;
        int startY = 0;
        // 记录总的要走的格子数，即所有的0的格子，并且加1（自身步数为1）,
        // 因为要求要走完所有的0的位置，所以当走到结束点时，步数不等于sum的路径都是错的，直接回溯
        //
        int sum = 1;
        // 找到起始位置
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    // 起始位置
                    startX = i;
                    startY = j;
                }
                if (grid[i][j] == 0) {
                    sum++;
                }
            }
        }
        // 开始走，递归回溯
        return dfs(startX, startY, sum, grid);
    }

    private static int dfs(int x, int y, int stepSur, int[][] grid) {
        // 排除越界的情况和遇到障碍的情况
        if (x < 0 || x >= grid[0].length || y < 0 || y >= grid.length || grid[y][x] == -1) {
            return 0;
        }
        if (grid[y][x] == 2) {
            return stepSur == 0 ? 1 : 0;
        }
        // 已走过的标记为障碍
        grid[y][x] = -1;
        int res = 0;
        // 继续上下左右走
        res += dfs(x - 1, y, stepSur - 1, grid);
        res += dfs(x + 1, y, stepSur - 1, grid);
        res += dfs(x, y - 1, stepSur - 1, grid);
        res += dfs(x, y + 1, stepSur - 1, grid);
        // dfs遍历完该位置为起始位置的情况后，置零，以不影响后面的dfs
        grid[y][x] = 0;
        return res;
    }
}
